import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";

import { trpc } from "../utils/trpc";
import {
  useTestHasuraGqlSubscription,
  useTrpcSubscription,
} from "@/utils/zeus-util";
import { Button, Slider } from "@mui/material";
import { Canvas, useFrame } from "@react-three/fiber";
import { useRef, useState } from "react";
import { OrbitControls } from "@react-three/drei";
import React from "react";
import NoSSR from "react-no-ssr";

export default function Home() {
  // const hello = trpc.hello.useQuery({ text: "client" });
  const { beacons } = useTestHasuraGqlSubscription();
  // const foo = useTrpcSubscription();
  trpc.onAdd.useSubscription(undefined, {
    onData(data) {
      console.log(data);
    },
  });
  const addPost = trpc.add.useMutation();

  return (
    <div className="p-8">
      <h1 className="btn text-3xl font-bold underline">Hello world!</h1>{" "}
      <Button
        variant="contained"
        className="p-6"
        onClick={() => addPost.mutate({})}
      >
        test
      </Button>
      {JSON.stringify(beacons)}
      <Slider defaultValue={30} />
      <Slider defaultValue={30} className="text-teal-600" />
      <NoSSR>
        <Scene />
      </NoSSR>
    </div>
  );

  // if (!hello.data) {
  //   return <div>Loading...{JSON.stringify(hello)}</div>;
  // }
  // return (
  //   <div>
  //     <p>{hello.data.greeting}</p>
  //     <p>{JSON.stringify(hello.data.beacon)}</p>
  //     {/* <p>{JSON.stringify(beacons)}</p> */}
  //   </div>
  // );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={``}>test</main>
    </>
  );
}

function Scene() {
  return (
    <Canvas>
      <OrbitControls makeDefault />

      <ambientLight />
      <pointLight position={[10, 10, 10]} />
      <Box position={[-1.2, 0, 0]} />
      <Box position={[1.2, 0, 0]} />
    </Canvas>
  );
}

function Box(props) {
  // This reference will give us direct access to the mesh
  const mesh = useRef();
  // Set up state for the hovered and active state
  const [hovered, setHover] = useState(false);
  const [active, setActive] = useState(false);
  // Subscribe this component to the render-loop, rotate the mesh every frame
  useFrame((state, delta) => (mesh.current.rotation.x += delta));
  // Return view, these are regular three.js elements expressed in JSX
  return (
    <mesh
      {...props}
      ref={mesh}
      scale={active ? 1.5 : 1}
      onClick={(event) => setActive(!active)}
      onPointerOver={(event) => setHover(true)}
      onPointerOut={(event) => setHover(false)}
    >
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? "hotpink" : "orange"} />
    </mesh>
  );
}
